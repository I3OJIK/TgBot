from aiogram import F, Router, types

from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext


import app.keyboards as kb

from app.api_client import get_access_token, get_cart, change_product_quantity


class Reg(StatesGroup):
    name = State()
    number = State()


router = Router()

# message.reply - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply(f'–ó–¥–∞—Ä–æ–≤–∞ –µ–ø.\n –¢–≤–æ–π ID: {message.from_user.id}\n –¢–≤–æ–µ –∏–º—è: {message.from_user.full_name}',
                        reply_markup=kb.main)

@router.message(Command('help'))
async def get_help(message: Message):
    await message.answer('–ö–æ–º–∞–Ω–¥–∞ /help')

@router.message(Command('token'))
async def get_help(message: Message):
    token = await get_access_token()
    await message.answer(f'Token:\n {token}')


@router.message(Command('cart'))
async def send_cart(message: types.Message):
    token = await get_access_token()
    if not token:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
        return

    cart_data = await get_cart(token)
    if "data" not in cart_data or not cart_data["data"]:
        await message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    await message.answer(
        "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:",
        reply_markup=kb.build_cart_keyboard(cart_data)
    )

async def update_cart_message(callback: CallbackQuery):
    token = await get_access_token()
    cart_data = await get_cart(token)

    if "data" not in cart_data or not cart_data["data"]:
        new_text = "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        new_markup = None
    else:
        new_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:"
        new_markup = kb.build_cart_keyboard(cart_data)
        
    await callback.message.edit_text(new_text, reply_markup=new_markup)

@router.callback_query(F.data.startswith("decrease:"))
async def on_decrease_callback(callback: CallbackQuery):
    product_id = callback.data.split(":")[1]
    delta = -1
    await change_product_quantity(product_id, delta)
    await update_cart_message(callback)
    await callback.answer("–£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞")


@router.callback_query(F.data.startswith("increase:"))
async def on_increase_callback(callback: CallbackQuery):
    product_id = callback.data.split(":")[1]
    delta = 1
    await change_product_quantity(product_id, delta)
    await update_cart_message(callback)
    await callback.answer("–£–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞")


# –õ–æ–≤–∏–º —Å –ø–æ–º–æ—â—å—é F.text –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.text == '–ö–∞–∫ –¥–µ–ª–∞?') 
async def how_are_you(message: Message):
    await message.answer('–•–∞—Ä–∞—à–æ')

# photo[-1] - –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∞–π–¥–∏ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
@router.message(F.photo) 
async def get_photo(message: Message):
    await message.answer(f'ID —Ñ–æ—Ç–æ: {message.photo[-1].file_id}')

@router.message(F.text == '–ü–æ–∫–∞–∂–∏ –º–∞—Ä—Ç—ã—à–∫—É')
async def get_help(message: Message):
    await message.answer_photo(photo='AgACAgIAAxkBAAMeaJtcsae0aUCJ5F2OnQ9aG1xecGEAAnv1MRvm2NlIWIVbjWcKxGYBAAMCAAN5AAM2BA',
                               caption='–ú–∞—Ä—Ç—ã—à–∫–∞')
    
# –ø–æ—ç—Ç–∞–ø–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (—Å–Ω–∞—á–∞–ª–æ –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ—Ç–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω)
@router.message(Command('reg'))
async def reg_one(message: Message, state: FSMContext):
    await state.set_state(Reg.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è')
# –ø–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞, –≤—ã–≤–æ–¥ –∫–æ—Ä–∑–∏–Ω—ã, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ, —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
@router.message(Reg.name)
async def reg_two(message: Message,state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg.number)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')

@router.message(Reg.number)
async def reg_three(message: Message,state: FSMContext):
    await state.update_data(number=message.text)
    data = await state.get_data()
    await message.answer(f'–®–ø–∞—Å–µ–±–∞\n –ò–º—è: {data["name"]}\n —Ç–µ–ª–µ—Ñ–æ–Ω: {data["number"]}')
    await state.clear()